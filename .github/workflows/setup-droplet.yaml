name: Setup Droplet

on:
  workflow_dispatch:
    inputs:
      droplet_subdomain:
        description: "Subdomain"
        required: true
      droplet_size:
        description: "Size"
        required: true
        default: "s-1vcpu-512mb-10gb"
      droplet_image:
        description: "Image"
        required: true
        default: "ubuntu-24-04-x64"
      droplet_region:
        description: "Region"
        required: true
        default: "fra1"

jobs:
  setup_droplet:
    runs-on: ubuntu-latest
    steps:
      - name: Construct full domain
        id: full_domain
        run: echo "value=${{ github.event.inputs.droplet_subdomain }}.${{ secrets.DOMAIN_NAME }}" >> $GITHUB_OUTPUT

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Terraform CLI
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.7"
          terraform_wrapper: false 

      - name: Terraform init
        run: terraform init -no-color
        working-directory: infra/terraform

      - name: Terraform apply
        run: |
          terraform apply -auto-approve \
            -var="do_token=${{ secrets.DO_TOKEN }}" \
            -var="ssh_key_fingerprint=${{ secrets.SSH_KEY_FINGERPRINT }}" \
            -var="droplet_name=${{ steps.full_domain.outputs.value }}" \
            -var="size=${{ github.event.inputs.droplet_size }}" \
            -var="image=${{ github.event.inputs.droplet_image }}" \
            -var="region=${{ github.event.inputs.droplet_region }}"
        working-directory: infra/terraform

      - name: Capture droplet IP
        id: droplet_ip
        working-directory: infra/terraform
        run: |
          raw_ip=$(terraform output -raw droplet_ip -no-color)
          ip=$(echo "$raw_ip" | grep -Eo '([0-9]{1,3}\.){3}[0-9]{1,3}' | head -n1)
          echo "ip=$ip" >> $GITHUB_OUTPUT

      - name: Set up Python & install Ansible
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Ansible
        run: |
          python -m pip install --upgrade pip
          pip install ansible

      - name: Verify Ansible
        run: |
          ansible --version
          ls -R infra/ansible

      - name: Prepare SSH private key for Ansible
        run: |
          mkdir -p infra/ansible
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > infra/ansible/ansible_key
          chmod 600 infra/ansible/ansible_key

      - name: Write SSH public key
        run: |
          mkdir -p infra/ansible
          printf "%s" "${{ secrets.SSH_PUBLIC_KEY }}" > infra/ansible/deploy_key.pub
          chmod 644 infra/ansible/deploy_key.pub

      - name: Generate Ansible inventory
        run: |
          cat > infra/ansible/inventory.ini <<EOF
          [vps]
          ${{ steps.droplet_ip.outputs.ip }} ansible_user=root ansible_ssh_private_key_file=ansible_key
          EOF

      - name: Verify connectivity to VPS
        working-directory: infra/ansible
        run: ansible all -m ping --inventory inventory.ini

      - name: Apply Ansible playbook
        working-directory: infra/ansible
        run: ansible-playbook site.yml
        env:
          ANSIBLE_CONFIG: ./ansible.cfg

      - name: Run traefik/whoami container on VPS
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ steps.droplet_ip.outputs.ip }}
          username: deploy
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            sudo docker run -d --name traefik-whoami --restart unless-stopped -p 80:80 traefik/whoami

      - name: Install curl and jq on runner
        run: |
          sudo apt-get update
          sudo apt-get install -y curl jq

      - name: Update DNS on Cloudflare
        env:
          CF_API_TOKEN: ${{ secrets.CLOUDFLARE_TOKEN }}
          CF_ZONE_ID: ${{ secrets.CLOUDFLARE_ZONE_ID }}
          FULL_DOMAIN: ${{ steps.full_domain.outputs.value }}
          DROPLET_IP: ${{ steps.droplet_ip.outputs.ip }}
        run: |
          chmod +x infra/scripts/update-dns.sh
          infra/scripts/update-dns.sh

      - name: Wait for DNS to propagate
        run: |
          DOMAIN=${{ steps.full_domain.outputs.value }}
          EXPECTED_IP=${{ steps.droplet_ip.outputs.ip }}
          echo "Waiting for $DOMAIN to resolve to $EXPECTED_IP..."
          for i in $(seq 1 30); do
            RESOLVED=$(dig +short "$DOMAIN" A | head -n1)
            if [[ "$RESOLVED" == "$EXPECTED_IP" ]]; then
              echo "DNS propagated after $i attempts."
              break
            fi
            echo "Attempt $i: got '${RESOLVED:-none}'; retrying in 10s..."
            sleep 10
          done
          if [[ "$RESOLVED" != "$EXPECTED_IP" ]]; then
            echo "::error::DNS did not propagate after 5 minutes"
            exit 1
          fi

      - name: Obtain TLS certificate
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ steps.droplet_ip.outputs.ip }}
          username: deploy
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            FULL_DOMAIN='${{ steps.full_domain.outputs.value }}'
            TLS_EMAIL='${{ secrets.TLS_EMAIL }}'

            sudo docker stop traefik-whoami  || true
            sudo docker rm   traefik-whoami  || true

            cd /srv/application
            sudo env FULL_DOMAIN="$FULL_DOMAIN" TLS_EMAIL="$TLS_EMAIL" \
              docker compose -f compose.yaml up -d
